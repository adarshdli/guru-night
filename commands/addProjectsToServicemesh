#!/bin/bash

addProjectsToServicemesh::run(){
  echo "Creating Istio Service Member Roll"

  local projects=$(readopt -p --prefix)
  if [ -z $projects ]; then 
     projects=(${PROJECTS:-'tutorial'})
  fi

  local projects=${PROJECTS:-(tutorial)};
  echo "Adding Projects to Istio Service Member Roll"

  local project_from=$(readopt -f --from)
  if [ -z $project_from ]; then 
     project_from=$USERS_FROM
  fi

  local project_to=$(readopt -t --to)
  if [ -z $project_to ]; then 
     project_to=$USERS_TO
  fi
  
  for p in "${projects[@]}" 
  do
    for ((i=$project_from; i<=project_to ; i++ ));
    do
      yq w -i "$(configdir)/istio-service-member-roll.yaml" \
        'spec.members[+]' $(printf "$p-%d" $i)
    done 
  done

  # add knative-serving
  yq w -i "$(configdir)/istio-service-member-roll.yaml" \
        'spec.members[+]' 'knative-serving'

  oc apply -f "$(configdir)/istio-service-member-roll.yaml"

  # Reset it back so that can be used with another setup
  yq d -i "$(configdir)/istio-service-member-roll.yaml" "spec.members" "[]"
}

addProjectsToServicemesh::usage(){
   cat <<EOT
  -f --from <project count from>    The starting user count e.g. 1
  -t --to <project count to>        The ending user count e.g. 10
  -p --prefix <project prefix>      The project name prefix e.g tutorial
EOT
}

addProjectsToServicemesh::description(){
  echo "Configures projects that needs to be added to Istio Servicemesh"
}